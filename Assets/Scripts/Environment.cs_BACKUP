using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine;

public abstract class Environment : MonoBehaviour {
	public float reward;
	public bool done;
	public int maxSteps;
	public int currentStep;
	public bool begun;
	public bool acceptingSteps;

	public Agent agent;
	public int comPort;
	public int frameToSkip;
	public int framesSinceAction;
	public string currentPythonCommand;
	public bool skippingFrames;
	public float[] actions;
	public float waitTime;
	public int episodeCount;
	public bool humanControl;

	public int bumper;

	public EnvironmentParameters envParameters;

	public virtual void SetUp () {
		envParameters = new EnvironmentParameters()
		{
			observation_size = 0,
			state_size = 0,
			action_descriptions = new List<string>(),
			action_size = 0,
			env_name = "Null",
			action_space_type = "discrete",
			state_space_type = "discrete",
			num_agents = 1
		};
		begun = false;
		acceptingSteps = true;
		startingTime = Time.time;
	}

	float startingTime = 0;

	// Update is called once per frame
	void Update () {
		
	}

	public virtual int collectState() {
		return 0;
	}
		
	public virtual void Step() {
		acceptingSteps = false;
		currentStep += 1;
		if(Time.time-startingTime > 420)
		{
			GameObject.Find("ETxt").GetComponent<Text>().text = "Tempo Scaduto!";
			Debug.Log("Tempo Scaduto!");
			done = true;
		}

		reward = 0;
		actions = agent.GetAction ();
		framesSinceAction = 0;

		int sendAction = Mathf.FloorToInt(actions [0]);
		MiddleStep (sendAction);

		//StartCoroutine (WaitStep ());
		//EndStep();
	}

	public virtual void MiddleStep(int action) {

	}

	public virtual void MiddleStep(float[] action) {

	}



	public virtual void EndStep() {
		Debug.Log("Last State" + ((LinearAgent)agent).lastState + " - Current State " + collectState());
		agent.SendState (collectState(), reward, done);
		skippingFrames = false;
		acceptingSteps = true;
		RunMdp();
	}

	public virtual void Reset() {
//		Debug.Log("Number of Steps " + currentStep);
		reward = 0;
		currentStep = 0;
		episodeCount++;
		done = false;
		acceptingSteps = false;
	}

	public virtual void EndReset() {
		//		agent.SendState (collectState(), reward, done);
		Step();
		skippingFrames = false;
		//acceptingSteps = true;
		begun = true;
		framesSinceAction = 0;
	}

    public virtual void RunMdp()
    {
        if (acceptingSteps == true)
        {
            if (done == false)
            {
                Step();
            }
            else
            {
                Reset();
            }
        }
    }
}
